
<!doctype html>
<html class="no-js" xmlns="https://www.w3.org/1999/xhtml"
      xmlns:fb="https://ogp.me/ns/fb#">
<head>
<base href="https://sakurity.com" />

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Why OWASP Top 10 is no longer relevant</title>

    <meta name="description" content="We do penetration testing, source code auditing and vulnerability assessments">
    <meta name="keywords"
          content="Fintech Security, OAuth, Bitcoin Security, Layer2, Lightning network">


    <link rel="icon" type="image/x-icon" href="/images/favicon.ico"/>
    <link rel="stylesheet" href="/styles/vendor.css"/>
    <link rel="stylesheet" href="/styles/main.css"/>
<meta property="og:image" content="https://www.sakurity.com/images/sakurity-logo@2x.png" />


  <link rel="canonical" href="https://sakurity.com/blog/2017/04/24/owasp.mdown">
  <link rel="alternate" type="application/rss+xml" title="The Sakurity Blog" href="https://sakurity.com/blog/feed.xml" />



</head>

<body>



<nav class="top-bar row" data-topbar>
    <section class="top-bar-section">

        <ul class="left">
            <li><a href="/">Home</a></li>
            <li><a href="/blog">Blog</a></li>
            <li><a href="/research">Research</a></li>
            <li><a href="/contact">Contact Us</a></li>

        </ul>

    </section>
</nav>
    <div class="page-content">
      <div class="wrapper">

<div class="post">

  <header class="post-header">
    <h1 class="post-title">Why OWASP Top 10 is no longer relevant</h1>
  </header>

  <article class="post-content">
At this point, OWASP Top 10 is considered one and the only bridge between security researchers and developers. There are some books and blog posts here and there but if you're looking for "top threats & vulnerabilities" that's what you will be offered by others including Google.

Unfortunately OWASP is out of touch with reality. First Top10 was released in 2003 and back then the web was a mess. CSRF? Everywhere. XSS? Give me a minute. SQL injection? Just try another parameter.

Now most misdesigned vectors are treated on framework level (and you should always use one - don't build a house from scratch, reuse blocks that have proven track record). I will use Rails as an example but others are very similar.

<a href="https://www.owasp.org/index.php/Top_10_2017-Top_10">Let's take up-to-date list from here</a> and comment every item.

<img src="imgs/owasp.png">

A1. Injection - not going to happen with major frameworks. There are some corner cases such as <a href="https://rails-sqli.org/">barely used ORM methods</a> which could be fixed by renaming "calculate" to "unsafe_calculate". In fact every library developer should expose dangerous method with "unsafe_" prefix if you care about your users.

Injection is still a relevant threat but only because ORM developers made naming mistakes. 

A2 Broken Authentication and Session Management - session management is long time solved problem since we all use auth libraries. 

Seriously do not roll out your own auth library, use Devise or Omniauth. They pop first during the audits.

A3. XSS - (should be under A1 Injection) is generally solved problem. The output uses templates, client side frameworks use templates, corner cases like JSON-in-script-tag is also solved. Try to put &#39;&quot;&gt;&lt;img src=x onerror=alert(0)&gt; in every input you see on a website (some people do it for a living) - yields nothing these days.

There are still ways you can be hit by 3rd party libraries but there's nothing you can do as a developer. Just don't `html_safe` on unsafe strings. Obvious.

A4 - Broken Access Control. Unfortunatelly business logic and access management isn't a solved problem. The best approach is to always chain your code as current_user.comments.find(params[:comment_id]) and manually assign things like topic_id (instead of mass assign) so the access is checked on all read/write operations. CanCan is also a great solution.

A5 - Security Misconfiguration. This is good one and there's nothing a framework can do for you. There are things like Redis that is exposed by default. There's not much you can do about your coding style, just read manuals carefully and listen others.  

A6 - Sensitive Data Exposure. You must be using https by now. Just use LetsEncrypt. Not worth a dedicated item.

A7 - Insufficient Attack Protection. <a href="http://www.skeletonscribe.net/2017/04/abusing-owasp.html">That's the last straw that made me write this post.</a> So now companies like Contrast Security can use OWASP to literally add "A7. Not enough of Contrast Security". 

A8 - CSRF. Solved problem. State-changing action must be non-GET and non-GET should require authenticity_token - simple as that.

A9 - Using Components with Known Vulnerabilities - patch your stuff when CVE is out. Far from a solved problem but regular "bundle update" is all you can do.

A10 - Underprotected APIs. Frankly, this one is written for complete noobs. If you don't realize that the attacker can fake arbitrary requests looking like from JS or mobile app, you're not ready to write production code.

We are left with A1, A4, A5 and A9 as somewhat relevant and a dozen of other attack vectors common app faces with no single mention. 

Not just most of the items being irrelevant for modern development team - what's worse it misses **so many attack vectors**. 

From top of my head:

1. Race conditions

Look at <a href="https://magoo.github.io/Blockchain-Graveyard/">BlockChain Graveyard</a> (ironically the Graveyard is great OWASP replacement with sorting by damage). Only few mentions race condition (many reasons are undisclosed) but reality is harsh.

2. SSRF

Webhooks, download this URL, instant payment notifications etc

3. OAuth

<a href="https://sakurity.com/oauth">There is a list of known OAuth design flaws</a> and that doesn't fit into a single item of Top10.

If you aren't maintaining some PHP app written 10 years ago, Top 10 list is irrelevant to you. By reading Top 10 you gain no useful knowledge. It's now just a marketing term and rather good indicator the company using it is a snake-oil. No, it's not even a "good start".

Many years ago when websites had more vulnerabilities than features it was a nice short list to get basic sense of what secure coding is.

It's also true there's no alternative. There's no one big bible about all known platform-specific bugs. Creating one would be a very hard task and honestly not in best interest of us, security researchers.



<h3>Apr 24, 2017 â€¢ Egor Homakov (<a href='https://twitter.com/homakov'>@homakov</a>)</h3>



  </article>






<div id="spot-im-frame-inpage" data-post-id=""></div>


</div></div>



<div class="content">


</div>



<footer>
    <div class="row">
        <div class="small-6 medium-3 large-2 columns">
            <h4>Sakurity</h4>
            <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/blog">Blog</a></li>
            <li><a href="/research">Research</a></li>
            <li><a href="/contact">Contact Us</a></li>

            </ul>
        </div>



        <div class="small-12 medium-6 large-8 small-text-center medium-text-right columns">
            <div class="logo-monochrome"></div>
            <p class="copyright">Sakurity Ltd, a Hong Kong company established in 2012.</p>
        </div>
    </div>
</footer>
</body>
</html>
